const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
  EVENTS,
} = require("@bot-whatsapp/bot");

const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MockAdapter = require("@bot-whatsapp/database/mock");

const initialOptions = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "0"];
const initialOptionsValues = {
  1: "LiquidaciÃ³n de multas",
  2: "RenovaciÃ³n de licencia",
  3: "Escuela de conducciÃ³n",
  4: "Traspasos",
  5: "Levantamiento de prenda",
  6: "SOAT",
  7: "LiquidaciÃ³n de impuestos",
  8: "Salida vehÃ­culos de patios",
  9: "RevisiÃ³n tecnico mecanica",
  10: "Duplicados",
};

const documentOptions = ["1", "2", "3", "4", "5", "6", "7"];
const documentOptionsValues = {
  1: "CÃ©dula",
  2: "Nit",
  3: "CÃ©dula extrangeria",
  4: "Tarjeta de identidad",
  5: "Pasaporte",
  6: "NÃºmero unido de identificacion personal",
  7: "Otro",
};

const licenseCategoriesValues = {
  1: "CategorÃ­a A2",
  2: "CategorÃ­a B1",
  3: "CategorÃ­a C1",
  4: "CategorÃ­a C2",
};

const transferCategoriesValues = {
  1: "Traspaso de propietario",
  2: "Traspaso persona indeterminada",
  3: "Traspaso de vehÃ­culo de servicio publico",
  4: "Traspaso a compaÃ±Ã­a de seguros",
  5: "Traspaso vehÃ­culo blindado",
  6: "Traspaso por sucesiÃ³n",
  7: "Traspaso a un menor de edad",
  8: "Traspaso a persona interesada",
};

const duplicatedDocumentValues = {
  1: "Licencia",
  2: "Tarjeta de propiedad",
};

const cityZonesValue = {
  1: "Norte",
  2: "Sur",
  3: "Centro",
  4: "Oriente",
};

const serviceTypesVehicleValue = {
  1: "Particular.",
  2: "PÃºblico.",
};

const flujoDespedidaExitosa = addKeyword(EVENTS.ACTION).addAnswer(
  ["En un momento uno de nuestros asesores atenderÃ¡ tu solicitud"],
  null,
  async (ctx, { flowDynamic, state }) => {
    const serviceType = state.get("serviceType");
    const documentType = state.get("documentType");
    const documentNumber = state.get("documentNumber");
    const categoryQty = state.get("categoryQty");
    const categoryLicense = state.get("categoryLicense");
    const vehicleRegistration = state.get("vehicleRegistration");
    const vehiclePlate = state.get("vehiclePlate");
    const transfer = state.get("transfer");
    const duplicatedDocument = state.get("duplicatedDocument");
    const userEmail = state.get("userEmail");
    const userPhone = state.get("userPhone");
    const tecnoMechanicalZone = state.get("tecnoMechanicalZone");
    const vehicleservice = state.get("vehicleservice");

    switch (serviceType) {
      case "1":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Tipo de documento:* _${
            documentOptionsValues[parseInt(documentType)]
          }_`,
          `*NÃºmero de documento:* _${documentNumber}_`,
        ]);
        break;
      case "2":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,

          `*NÃºmero de categorias:* _${categoryQty}_`,
          `*Tipo de documento:* _${
            documentOptionsValues[parseInt(documentType)]
          }_`,
          `*NÃºmero de documento:* _${documentNumber}_`,
        ]);
        break;
      case "3":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*CategorÃ­a de licencia:* _${
            licenseCategoriesValues[parseInt(categoryLicense)]
          }_`,
          `*Tipo de documento:* _${
            documentOptionsValues[parseInt(documentType)]
          }_`,
          `*NÃºmero de documento:* _${documentNumber}_`,
        ]);
        break;
      case "4":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Tipo de traspaso:* _${
            transferCategoriesValues[parseInt(transfer)]
          }_`,
          `*Ciudad de matricula del vehÃ­culo:* _${vehicleRegistration}_`,
          `*NÃºmero de matricula del vehÃ­culo:* _${vehiclePlate}_`,
        ]);
        break;
      case "5":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Ciudad de matricula del vehÃ­culo:* _${vehicleRegistration}_`,
          `*NÃºmero de matricula del vehÃ­culo:* _${vehiclePlate}_`,
        ]);
        break;
      case "7":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Tipo de servicio del vehÃ­culo:* _${
            serviceTypesVehicleValue[parseInt(vehicleservice)]
          }_`,
          `*Ciudad de matricula del vehÃ­culo:* _${vehicleRegistration}_`,
          `*NÃºmero de matricula del vehÃ­culo:* _${vehiclePlate}_`,
        ]);
        break;
      case "10":
        if (duplicatedDocument === "1") {
          await flowDynamic([
            "_*Resumen*_",
            `*Tipo de Servicio:* _${
              initialOptionsValues[parseInt(serviceType)]
            }_`,
            `*Duplicado:* ${
              duplicatedDocumentValues[parseInt(duplicatedDocument)]
            }`,
            `*Tipo de documento:* _${
              documentOptionsValues[parseInt(documentType)]
            }_`,
            `*NÃºmero de documento:* _${documentNumber}_`,
          ]);
        }
        if (duplicatedDocument === "2") {
          await flowDynamic([
            "_*Resumen*_",
            `*Tipo de Servicio:* _${
              initialOptionsValues[parseInt(serviceType)]
            }_`,
            `*Duplicado:* ${
              duplicatedDocumentValues[parseInt(duplicatedDocument)]
            }`,
            `*NÃºmero de matricula del vehÃ­culo:* _${vehiclePlate}_`,
          ]);
        }
        break;

      case "6":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Correo Electronico:* _${userEmail}_`,
          `*Numero celular:* _${userPhone}_`,
        ]);
        break;

      case "8":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
        ]);
        break;

      case "9":
        await flowDynamic([
          "_*Resumen*_",
          `*Tipo de Servicio:* _${
            initialOptionsValues[parseInt(serviceType)]
          }_`,
          `*Zona:* _${cityZonesValue[parseInt(tecnoMechanicalZone)]}_`,
        ]);
        break;
    }
  }
);

const flujoDatosPersonales = addKeyword(EVENTS.ACTION)
  .addAnswer(
    "Por favor digita correo electronico",
    { capture: true },
    async (ctx, { gotoFlow, state }) => {
      await state.update({ userEmail: ctx.body });
    }
  )
  .addAnswer(
    "Por favor digita numero celular",
    { capture: true },
    async (ctx, { gotoFlow, state }) => {
      await state.update({ userPhone: ctx.body });
      return gotoFlow(flujoDespedidaExitosa);
    }
  );

const flujoTecno = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Â¿En que zona de la ciudad desea realizar la revision tecnico mecanica?",
    "1. Norte",
    "2. Sur",
    "3. Centro",
    "4. Oriente",
  ],
  { capture: true },
  async (ctx, { state, gotoFlow, fallBack }) => {
    if (parseInt(ctx.body) > 4 || parseInt(ctx.body) < 1) {
      return fallBack();
    }

    await state.update({ tecnoMechanicalZone: ctx.body });

    return gotoFlow(flujoDespedidaExitosa);
  }
);

const flujoImagenPosterior = addKeyword(EVENTS.ACTION).addAnswer(
  "Por favor envÃ­a foto posterior de la tarjeta de propiedad",
  { capture: true },
  (ctx, { gotoFlow, state }) => {
    const serviceType = state.get("serviceType");

    switch (serviceType) {
      case "6":
        return gotoFlow(flujoDatosPersonales);
        break;
      case "8":
        return gotoFlow(flujoDespedidaExitosa);
        break;

      case "9":
        return gotoFlow(flujoTecno);
        break;
    }
  }
);

const flujoImagenFrontal = addKeyword(EVENTS.ACTION).addAnswer(
  "Por favor envÃ­a foto frontal de la tarjeta de propiedad",
  { capture: true },
  async (ctx, { gotoFlow, fallBack, state }) => {
    await state.update({ frontalImage: ctx.body });
    return gotoFlow(flujoImagenPosterior);
  }
);

const flujoPlacaVehiculo = addKeyword(EVENTS.ACTION).addAnswer(
  ["Por favor digita nÃºmero de placa en mayÃºscula y sin espacios"],
  { capture: true },
  async (ctx, { state, gotoFlow }) => {
    await state.update({ vehiclePlate: ctx.body });
    return gotoFlow(flujoDespedidaExitosa);
  }
);

const flujoTipoServicioVehiculo = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Por favor indica el tipo de servicio del vehÃ­culo.",
    "1. Particular.",
    "2. PÃºblico.",
  ],
  { capture: true },
  async (ctx, { state, gotoFlow, fallBack }) => {
    if (parseInt(ctx.body) > 2 || parseInt(ctx.body) < 1) {
      return fallBack();
    }

    await state.update({ vehicleservice: ctx.body });
    return gotoFlow(flujoPlacaVehiculo);
  }
);

const flujoMatriculaVehiculo = addKeyword(EVENTS.ACTION).addAnswer(
  ["Por favor digita en que ciudad se encuentra matriculado el vehÃ­culo"],
  { capture: true },
  async (ctx, { state, gotoFlow }) => {
    await state.update({ vehicleRegistration: ctx.body });
    return gotoFlow(flujoTipoServicioVehiculo);
  }
);

const flujoLiquidacion = addKeyword(EVENTS.ACTION)
  .addAnswer(
    [
      "Selecciona el tipo de documento ðŸªª",
      "1. CÃ©dula",
      "2. Nit",
      "3. CÃ©dula extrangeria",
      "4. Tarjeta de identidad",
      "5. Pasaporte",
      "6. NÃºmero unido de identificacion personal",
      "7. Otro",
    ],
    { capture: true },
    async (ctx, { fallBack, state }) => {
      if (!documentOptions.includes(ctx.body)) {
        return fallBack();
      }
      await state.update({ documentType: ctx.body });
    }
  )
  .addAnswer(
    "Escribe el nÃºmero de documento sin puntos, comas ni espacios",
    { capture: true },
    async (ctx, { gotoFlow, fallBack, state }) => {
      //TODO  realizar validacion que solo sean numericos

      await state.update({ documentNumber: ctx.body });
      return gotoFlow(flujoDespedidaExitosa);
    }
  );

const flujoRenovacion = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Indica el nÃºmero de categorias que deseas renovar",
    "1 CategorÃ­a",
    "2 CategorÃ­as",
  ],
  { capture: true },
  async (ctx, { gotoFlow, fallBack, state }) => {
    if (parseInt(ctx.body) > 2 || parseInt(ctx.body) < 1) {
      return fallBack();
    }

    await state.update({ categoryQty: ctx.body });
    return gotoFlow(flujoLiquidacion);
  }
);

const flujoEscuela = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Selecciona categoria de licencia?",
    "1. CategorÃ­a A2 (Moto)",
    "2. CategorÃ­a B1 (AutomÃ³viles, camperos, camionetas y microbuses de servicio particular)",
    "3. CategorÃ­a C1 (AutomÃ³viles, camperos, camionetas y microbuses de servicio pÃºblico)",
    "4. CategorÃ­a C2 (Camiones, rÃ­gidos, busetas y buses para el servicio pÃºblico)",
  ],
  { capture: true },
  async (ctx, { gotoFlow, fallBack, state }) => {
    if (parseInt(ctx.body) > 4 || parseInt(ctx.body) < 1) {
      return fallBack();
    }

    await state.update({ categoryLicense: ctx.body });
    return gotoFlow(flujoLiquidacion);
  }
);

const flujoTraspasos = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Selecciona el tipo de traspaso que deseas realizar",
    "1. Traspaso de propietario",
    "2. Traspaso persona indeterminada",
    "3. Traspaso vehÃ­culo de servicio pÃºblico",
    "4. Traspaso a compaÃ±Ã­a de seguros",
    "5. Traspaso vehÃ­culo blindado",
    "6. Traspaso por sucesiÃ³n",
    "7. Traspaso a menor de edad",
    "8. Traspaso a persona interesada",
  ],
  { capture: true },
  async (ctx, { gotoFlow, fallBack, state }) => {
    if (parseInt(ctx.body) > 8 || parseInt(ctx.body) < 1) {
      return fallBack();
    }

    await state.update({ transfer: ctx.body });
    return gotoFlow(flujoMatriculaVehiculo);
  }
);

const flujoDuplicados = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Digita el duplicado que deseas obtener",
    "1. Licencia",
    "2. Tarjeta de propiedad",
  ],
  { capture: true },
  async (ctx, { state, gotoFlow, fallBack }) => {
    if (parseInt(ctx.body) > 2 || parseInt(ctx.body) < 1) {
      return fallBack();
    }
    await state.update({ duplicatedDocument: ctx.body });
    switch (ctx.body) {
      case "1":
        return gotoFlow(flujoLiquidacion);
      case "2":
        return gotoFlow(flujoPlacaVehiculo);
    }
  }
);

const flujoSaludo = addKeyword(["Hola", "Buenas"])
  .addAnswer([
    "ðŸš™ðŸ›µÂ¡Bienvenido a *Tramite Ya*!ðŸ›µðŸš™",
    "Gracias por contactarnos ",
  ])
  .addAnswer(
    [
      "Â¿En que servicio podemos asesorarte?",
      "1. LiquidaciÃ³n de multas",
      "2. RenovaciÃ³n de licencia",
      "3. Escuela de conducciÃ³n",
      "4. Traspasos",
      "5. Levantamiento de prenda",
      "6. SOAT",
      "7. LiquidaciÃ³n de impuestos",
      "8. Salida vehÃ­culos en patios",
      "9. RevisiÃ³n tÃ©cnico mecÃ¡nica",
      "10. Duplicados",
    ],
    { capture: true },
    async (ctx, { gotoFlow, fallBack, state }) => {
      if (!initialOptions.includes(ctx.body)) {
        return fallBack();
      }
      await state.update({ serviceType: ctx.body });
      switch (ctx.body) {
        case "1":
          return gotoFlow(flujoLiquidacion);
        case "2":
          return gotoFlow(flujoRenovacion);
        case "3":
          return gotoFlow(flujoEscuela);
        case "4":
          return gotoFlow(flujoTraspasos);
        case "5":
          return gotoFlow(flujoMatriculaVehiculo);
        case "6":
          return gotoFlow(flujoImagenFrontal);
        case "7":
          return gotoFlow(flujoMatriculaVehiculo);
        case "8":
          return gotoFlow(flujoImagenFrontal);
        case "9":
          return gotoFlow(flujoImagenFrontal);
        case "10":
          return gotoFlow(flujoDuplicados);
      }
    }
  );

const main = async () => {
  const adapterDB = new MockAdapter();
  const adapterFlow = createFlow([
    flujoSaludo,
    flujoLiquidacion,
    flujoDespedidaExitosa,
    flujoRenovacion,
    flujoEscuela,
    flujoMatriculaVehiculo,
    flujoPlacaVehiculo,
    flujoTraspasos,
    flujoDuplicados,
    flujoImagenFrontal,
    flujoImagenPosterior,
    flujoDatosPersonales,
    flujoTecno,
    flujoTipoServicioVehiculo,
  ]);
  const adapterProvider = createProvider(BaileysProvider);

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });

  QRPortalWeb();
};

main();
